# Generated by Django 4.2.7 on 2025-09-02 02:33

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Board",
            fields=[
                (
                    "board_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("Fashion", "Fashion"),
                            ("Home Decor", "Home Decor"),
                            ("Food", "Food"),
                            ("Travel", "Travel"),
                            ("DIY & Crafts", "DIY & Crafts"),
                            ("Beauty", "Beauty"),
                            ("Health & Fitness", "Health & Fitness"),
                            ("Photography", "Photography"),
                            ("Art", "Art"),
                            ("Gardening", "Gardening"),
                        ],
                        max_length=50,
                    ),
                ),
                ("subcategory", models.CharField(max_length=100)),
                ("is_private", models.BooleanField(default=False)),
                ("pins_count", models.PositiveIntegerField(default=0)),
                ("followers_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "user_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("bio", models.TextField(blank=True, max_length=500, null=True)),
                ("location", models.CharField(blank=True, max_length=100)),
                ("followers_count", models.PositiveIntegerField(default=0)),
                ("following_count", models.PositiveIntegerField(default=0)),
                ("boards_count", models.PositiveIntegerField(default=0)),
                ("pins_count", models.PositiveIntegerField(default=0)),
                (
                    "account_type",
                    models.CharField(
                        choices=[("personal", "Personal"), ("business", "Business")],
                        default="personal",
                        max_length=20,
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                ("preferred_categories", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_active", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="pinterest_user_set",
                        related_query_name="pinterest_user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="pinterest_user_set",
                        related_query_name="pinterest_user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("category_preferences", models.JSONField(default=dict)),
                ("avg_session_duration", models.FloatField(default=0.0)),
                ("interaction_frequency", models.FloatField(default=0.0)),
                ("preferred_pin_types", models.JSONField(default=list)),
                ("active_hours", models.JSONField(default=list)),
                ("active_days", models.JSONField(default=list)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to="core.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Pin",
            fields=[
                (
                    "pin_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=500)),
                ("description", models.TextField(blank=True, null=True)),
                ("image_url", models.URLField(max_length=500)),
                ("source_url", models.URLField(blank=True, max_length=500, null=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("Fashion", "Fashion"),
                            ("Home Decor", "Home Decor"),
                            ("Food", "Food"),
                            ("Travel", "Travel"),
                            ("DIY & Crafts", "DIY & Crafts"),
                            ("Beauty", "Beauty"),
                            ("Health & Fitness", "Health & Fitness"),
                            ("Photography", "Photography"),
                            ("Art", "Art"),
                            ("Gardening", "Gardening"),
                        ],
                        max_length=50,
                    ),
                ),
                ("subcategory", models.CharField(max_length=100)),
                ("width", models.PositiveIntegerField()),
                ("height", models.PositiveIntegerField()),
                ("color_palette", models.JSONField(blank=True, default=list)),
                ("saves_count", models.PositiveIntegerField(default=0)),
                ("likes_count", models.PositiveIntegerField(default=0)),
                ("comments_count", models.PositiveIntegerField(default=0)),
                ("shares_count", models.PositiveIntegerField(default=0)),
                ("clicks_count", models.PositiveIntegerField(default=0)),
                ("impressions_count", models.PositiveIntegerField(default=0)),
                ("trending_score", models.FloatField(default=0.0)),
                ("is_promoted", models.BooleanField(default=False)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "board",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pins",
                        to="core.board",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pins",
                        to="core.user",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="board",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="boards",
                to="core.user",
            ),
        ),
        migrations.CreateModel(
            name="UserInteraction",
            fields=[
                (
                    "interaction_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "interaction_type",
                    models.CharField(
                        choices=[
                            ("save", "Save"),
                            ("like", "Like"),
                            ("click", "Click"),
                            ("share", "Share"),
                            ("comment", "Comment"),
                        ],
                        max_length=20,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("session_id", models.UUIDField(blank=True, null=True)),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("mobile", "Mobile"),
                            ("desktop", "Desktop"),
                            ("tablet", "Tablet"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "referrer",
                    models.CharField(
                        choices=[
                            ("home_feed", "Home Feed"),
                            ("search", "Search"),
                            ("category_browse", "Category Browse"),
                            ("related_pins", "Related Pins"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "pin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interactions",
                        to="core.pin",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interactions",
                        to="core.user",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "interaction_type"],
                        name="core_userin_user_id_100a12_idx",
                    ),
                    models.Index(
                        fields=["pin", "interaction_type"],
                        name="core_userin_pin_id_21d199_idx",
                    ),
                    models.Index(
                        fields=["-timestamp"], name="core_userin_timesta_8f2d85_idx"
                    ),
                ],
                "unique_together": {("user", "pin", "interaction_type")},
            },
        ),
        migrations.CreateModel(
            name="SearchQuery",
            fields=[
                (
                    "query_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("query_text", models.CharField(max_length=200)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("results_count", models.PositiveIntegerField(default=0)),
                ("clicked_results", models.PositiveIntegerField(default=0)),
                ("session_id", models.UUIDField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="search_queries",
                        to="core.user",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "-timestamp"],
                        name="core_search_user_id_f566a9_idx",
                    ),
                    models.Index(
                        fields=["query_text"], name="core_search_query_t_101d13_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="RecommendationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("collaborative", "Collaborative Filtering"),
                            ("content_based", "Content-Based"),
                            ("trending", "Trending"),
                            ("hybrid", "Hybrid"),
                        ],
                        max_length=30,
                    ),
                ),
                ("confidence_score", models.FloatField()),
                ("position", models.PositiveIntegerField()),
                ("shown_at", models.DateTimeField(auto_now_add=True)),
                ("clicked", models.BooleanField(default=False)),
                ("saved", models.BooleanField(default=False)),
                (
                    "pin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.pin"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.user"
                    ),
                ),
            ],
            options={
                "ordering": ["-shown_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "-shown_at"],
                        name="core_recomm_user_id_4cd188_idx",
                    ),
                    models.Index(
                        fields=["recommendation_type"],
                        name="core_recomm_recomme_dad092_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="pin",
            index=models.Index(fields=["category"], name="core_pin_categor_735907_idx"),
        ),
        migrations.AddIndex(
            model_name="pin",
            index=models.Index(
                fields=["trending_score"], name="core_pin_trendin_7011a8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="pin",
            index=models.Index(
                fields=["-created_at"], name="core_pin_created_e678be_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="pin",
            index=models.Index(
                fields=["saves_count"], name="core_pin_saves_c_e6d9de_idx"
            ),
        ),
    ]
